//! Integration tests for the Bract compiler
//! 
//! This module contains comprehensive end-to-end tests that validate
//! the entire compiler pipeline from source code to executable C code.

pub mod lexer;
pub mod parser;
pub mod semantic;
pub mod integration;
pub mod examples;

/// Common test utilities and helpers
pub mod common {
    use bract::{Parser, semantic::SemanticAnalyzer, codegen::CCodeGenerator};
    use std::fs;
    use std::path::Path;
    use tempfile::TempDir;
    
    /// Test helper to create a temporary directory
    pub fn create_temp_dir() -> TempDir {
        TempDir::new().expect("Failed to create temp directory")
    }
    
    /// Test helper to write a test file
    pub fn write_test_file(dir: &Path, filename: &str, content: &str) -> std::path::PathBuf {
        let file_path = dir.join(filename);
        fs::write(&file_path, content).expect("Failed to write test file");
        file_path
    }
    
    /// Test helper to run the complete compilation pipeline
    pub fn compile_bract_source(source: &str) -> Result<(String, String), String> {
        // Parse
        let mut parser = Parser::new(source, 0)
            .map_err(|e| format!("Parser creation failed: {}", e))?;
        let ast = parser.parse_module()
            .map_err(|e| format!("Parsing failed: {}", e))?;
        
        // Semantic analysis
        let mut analyzer = SemanticAnalyzer::new();
        let analysis_result = analyzer.analyze(&ast);
        
        if !analysis_result.errors.is_empty() {
            return Err(format!("Semantic analysis failed: {:?}", analysis_result.errors));
        }
        
        // Code generation
        let mut generator = CCodeGenerator::new(analysis_result.symbol_table);
        let (header, implementation) = generator.generate_module(&ast)
            .map_err(|e| format!("Code generation failed: {}", e))?;
        
        Ok((header, implementation))
    }
    
    /// Test helper to validate generated C code structure
    pub fn validate_c_code(header: &str, implementation: &str) {
        // Basic validation that the generated C code has expected structure
        assert!(header.contains("// Generated by Bract Compiler"));
        assert!(implementation.contains("// Generated by Bract Compiler"));
        
        // Check for common C constructs
        assert!(header.contains("#include") || implementation.contains("#include"));
    }
    
    /// Test helper to count lines in generated code
    pub fn count_lines(code: &str) -> usize {
        code.lines().count()
    }
} 
