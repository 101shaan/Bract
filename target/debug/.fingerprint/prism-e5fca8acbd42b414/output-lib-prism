{"$message_type":"diagnostic","message":"unused imports: `BinaryOp`, `EnumVariant`, `FieldInit`, `GenericParam`, `ImplItem`, `Literal`, `MatchArm`, `Pattern`, `PrimitiveType`, `StructField`, `StructFields`, `Type`, and `UnaryOp`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\parser\\parser.rs","byte_start":168,"byte_end":175,"line_start":4,"line_end":4,"column_start":44,"column_end":51,"is_primary":true,"text":[{"text":"use crate::ast::{Module, Item, Expr, Stmt, Pattern, Type, Span, Visibility, Parameter, InternedString, BinaryOp, UnaryOp, Literal, FieldInit, MatchArm, StructFields, StructField, EnumVariant, ImplItem, GenericParam, PrimitiveType};","highlight_start":44,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\parser\\parser.rs","byte_start":177,"byte_end":181,"line_start":4,"line_end":4,"column_start":53,"column_end":57,"is_primary":true,"text":[{"text":"use crate::ast::{Module, Item, Expr, Stmt, Pattern, Type, Span, Visibility, Parameter, InternedString, BinaryOp, UnaryOp, Literal, FieldInit, MatchArm, StructFields, StructField, EnumVariant, ImplItem, GenericParam, PrimitiveType};","highlight_start":53,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\parser\\parser.rs","byte_start":228,"byte_end":236,"line_start":4,"line_end":4,"column_start":104,"column_end":112,"is_primary":true,"text":[{"text":"use crate::ast::{Module, Item, Expr, Stmt, Pattern, Type, Span, Visibility, Parameter, InternedString, BinaryOp, UnaryOp, Literal, FieldInit, MatchArm, StructFields, StructField, EnumVariant, ImplItem, GenericParam, PrimitiveType};","highlight_start":104,"highlight_end":112}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\parser\\parser.rs","byte_start":238,"byte_end":245,"line_start":4,"line_end":4,"column_start":114,"column_end":121,"is_primary":true,"text":[{"text":"use crate::ast::{Module, Item, Expr, Stmt, Pattern, Type, Span, Visibility, Parameter, InternedString, BinaryOp, UnaryOp, Literal, FieldInit, MatchArm, StructFields, StructField, EnumVariant, ImplItem, GenericParam, PrimitiveType};","highlight_start":114,"highlight_end":121}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\parser\\parser.rs","byte_start":247,"byte_end":254,"line_start":4,"line_end":4,"column_start":123,"column_end":130,"is_primary":true,"text":[{"text":"use crate::ast::{Module, Item, Expr, Stmt, Pattern, Type, Span, Visibility, Parameter, InternedString, BinaryOp, UnaryOp, Literal, FieldInit, MatchArm, StructFields, StructField, EnumVariant, ImplItem, GenericParam, PrimitiveType};","highlight_start":123,"highlight_end":130}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\parser\\parser.rs","byte_start":256,"byte_end":265,"line_start":4,"line_end":4,"column_start":132,"column_end":141,"is_primary":true,"text":[{"text":"use crate::ast::{Module, Item, Expr, Stmt, Pattern, Type, Span, Visibility, Parameter, InternedString, BinaryOp, UnaryOp, Literal, FieldInit, MatchArm, StructFields, StructField, EnumVariant, ImplItem, GenericParam, PrimitiveType};","highlight_start":132,"highlight_end":141}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\parser\\parser.rs","byte_start":267,"byte_end":275,"line_start":4,"line_end":4,"column_start":143,"column_end":151,"is_primary":true,"text":[{"text":"use crate::ast::{Module, Item, Expr, Stmt, Pattern, Type, Span, Visibility, Parameter, InternedString, BinaryOp, UnaryOp, Literal, FieldInit, MatchArm, StructFields, StructField, EnumVariant, ImplItem, GenericParam, PrimitiveType};","highlight_start":143,"highlight_end":151}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\parser\\parser.rs","byte_start":277,"byte_end":289,"line_start":4,"line_end":4,"column_start":153,"column_end":165,"is_primary":true,"text":[{"text":"use crate::ast::{Module, Item, Expr, Stmt, Pattern, Type, Span, Visibility, Parameter, InternedString, BinaryOp, UnaryOp, Literal, FieldInit, MatchArm, StructFields, StructField, EnumVariant, ImplItem, GenericParam, PrimitiveType};","highlight_start":153,"highlight_end":165}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\parser\\parser.rs","byte_start":291,"byte_end":302,"line_start":4,"line_end":4,"column_start":167,"column_end":178,"is_primary":true,"text":[{"text":"use crate::ast::{Module, Item, Expr, Stmt, Pattern, Type, Span, Visibility, Parameter, InternedString, BinaryOp, UnaryOp, Literal, FieldInit, MatchArm, StructFields, StructField, EnumVariant, ImplItem, GenericParam, PrimitiveType};","highlight_start":167,"highlight_end":178}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\parser\\parser.rs","byte_start":304,"byte_end":315,"line_start":4,"line_end":4,"column_start":180,"column_end":191,"is_primary":true,"text":[{"text":"use crate::ast::{Module, Item, Expr, Stmt, Pattern, Type, Span, Visibility, Parameter, InternedString, BinaryOp, UnaryOp, Literal, FieldInit, MatchArm, StructFields, StructField, EnumVariant, ImplItem, GenericParam, PrimitiveType};","highlight_start":180,"highlight_end":191}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\parser\\parser.rs","byte_start":317,"byte_end":325,"line_start":4,"line_end":4,"column_start":193,"column_end":201,"is_primary":true,"text":[{"text":"use crate::ast::{Module, Item, Expr, Stmt, Pattern, Type, Span, Visibility, Parameter, InternedString, BinaryOp, UnaryOp, Literal, FieldInit, MatchArm, StructFields, StructField, EnumVariant, ImplItem, GenericParam, PrimitiveType};","highlight_start":193,"highlight_end":201}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\parser\\parser.rs","byte_start":327,"byte_end":339,"line_start":4,"line_end":4,"column_start":203,"column_end":215,"is_primary":true,"text":[{"text":"use crate::ast::{Module, Item, Expr, Stmt, Pattern, Type, Span, Visibility, Parameter, InternedString, BinaryOp, UnaryOp, Literal, FieldInit, MatchArm, StructFields, StructField, EnumVariant, ImplItem, GenericParam, PrimitiveType};","highlight_start":203,"highlight_end":215}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\parser\\parser.rs","byte_start":341,"byte_end":354,"line_start":4,"line_end":4,"column_start":217,"column_end":230,"is_primary":true,"text":[{"text":"use crate::ast::{Module, Item, Expr, Stmt, Pattern, Type, Span, Visibility, Parameter, InternedString, BinaryOp, UnaryOp, Literal, FieldInit, MatchArm, StructFields, StructField, EnumVariant, ImplItem, GenericParam, PrimitiveType};","highlight_start":217,"highlight_end":230}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"src\\parser\\parser.rs","byte_start":166,"byte_end":181,"line_start":4,"line_end":4,"column_start":42,"column_end":57,"is_primary":true,"text":[{"text":"use crate::ast::{Module, Item, Expr, Stmt, Pattern, Type, Span, Visibility, Parameter, InternedString, BinaryOp, UnaryOp, Literal, FieldInit, MatchArm, StructFields, StructField, EnumVariant, ImplItem, GenericParam, PrimitiveType};","highlight_start":42,"highlight_end":57}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src\\parser\\parser.rs","byte_start":226,"byte_end":354,"line_start":4,"line_end":4,"column_start":102,"column_end":230,"is_primary":true,"text":[{"text":"use crate::ast::{Module, Item, Expr, Stmt, Pattern, Type, Span, Visibility, Parameter, InternedString, BinaryOp, UnaryOp, Literal, FieldInit, MatchArm, StructFields, StructField, EnumVariant, ImplItem, GenericParam, PrimitiveType};","highlight_start":102,"highlight_end":230}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused imports: `BinaryOp`, `EnumVariant`, `FieldInit`, `GenericParam`, `ImplItem`, `Literal`, `MatchArm`, `Pattern`, `PrimitiveType`, `StructField`, `StructFields`, `Type`, and `UnaryOp`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\parser\\parser.rs:4:44\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0mt, Pattern, Type, Span, Visibility, Parameter, InternedString, BinaryOp, UnaryOp, Literal, FieldInit, MatchArm, StructFields, StructField, EnumVariant, ImplItem, GenericParam, PrimitiveType};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^\u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused imports: `FieldInit`, `InternedString`, `MatchArm`, `Pattern`, `Stmt`, and `Type`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\parser\\expressions.rs","byte_start":114,"byte_end":118,"line_start":4,"line_end":4,"column_start":24,"column_end":28,"is_primary":true,"text":[{"text":"use crate::ast::{Expr, Stmt, Type, Span, BinaryOp, UnaryOp, Literal, InternedString, FieldInit, MatchArm, Pattern};","highlight_start":24,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\parser\\expressions.rs","byte_start":120,"byte_end":124,"line_start":4,"line_end":4,"column_start":30,"column_end":34,"is_primary":true,"text":[{"text":"use crate::ast::{Expr, Stmt, Type, Span, BinaryOp, UnaryOp, Literal, InternedString, FieldInit, MatchArm, Pattern};","highlight_start":30,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\parser\\expressions.rs","byte_start":160,"byte_end":174,"line_start":4,"line_end":4,"column_start":70,"column_end":84,"is_primary":true,"text":[{"text":"use crate::ast::{Expr, Stmt, Type, Span, BinaryOp, UnaryOp, Literal, InternedString, FieldInit, MatchArm, Pattern};","highlight_start":70,"highlight_end":84}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\parser\\expressions.rs","byte_start":176,"byte_end":185,"line_start":4,"line_end":4,"column_start":86,"column_end":95,"is_primary":true,"text":[{"text":"use crate::ast::{Expr, Stmt, Type, Span, BinaryOp, UnaryOp, Literal, InternedString, FieldInit, MatchArm, Pattern};","highlight_start":86,"highlight_end":95}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\parser\\expressions.rs","byte_start":187,"byte_end":195,"line_start":4,"line_end":4,"column_start":97,"column_end":105,"is_primary":true,"text":[{"text":"use crate::ast::{Expr, Stmt, Type, Span, BinaryOp, UnaryOp, Literal, InternedString, FieldInit, MatchArm, Pattern};","highlight_start":97,"highlight_end":105}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\parser\\expressions.rs","byte_start":197,"byte_end":204,"line_start":4,"line_end":4,"column_start":107,"column_end":114,"is_primary":true,"text":[{"text":"use crate::ast::{Expr, Stmt, Type, Span, BinaryOp, UnaryOp, Literal, InternedString, FieldInit, MatchArm, Pattern};","highlight_start":107,"highlight_end":114}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"src\\parser\\expressions.rs","byte_start":112,"byte_end":124,"line_start":4,"line_end":4,"column_start":22,"column_end":34,"is_primary":true,"text":[{"text":"use crate::ast::{Expr, Stmt, Type, Span, BinaryOp, UnaryOp, Literal, InternedString, FieldInit, MatchArm, Pattern};","highlight_start":22,"highlight_end":34}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src\\parser\\expressions.rs","byte_start":158,"byte_end":204,"line_start":4,"line_end":4,"column_start":68,"column_end":114,"is_primary":true,"text":[{"text":"use crate::ast::{Expr, Stmt, Type, Span, BinaryOp, UnaryOp, Literal, InternedString, FieldInit, MatchArm, Pattern};","highlight_start":68,"highlight_end":114}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused imports: `FieldInit`, `InternedString`, `MatchArm`, `Pattern`, `Stmt`, and `Type`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\parser\\expressions.rs:4:24\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::ast::{Expr, Stmt, Type, Span, BinaryOp, UnaryOp, Literal, InternedString, FieldInit, MatchArm, Pattern};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused imports: `Expr`, `InternedString`, `Pattern`, and `Type`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\parser\\statements.rs","byte_start":435,"byte_end":439,"line_start":12,"line_end":12,"column_start":24,"column_end":28,"is_primary":true,"text":[{"text":"use crate::ast::{Stmt, Expr, Pattern, Type, Span, BinaryOp, InternedString, MatchArm};","highlight_start":24,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\parser\\statements.rs","byte_start":441,"byte_end":448,"line_start":12,"line_end":12,"column_start":30,"column_end":37,"is_primary":true,"text":[{"text":"use crate::ast::{Stmt, Expr, Pattern, Type, Span, BinaryOp, InternedString, MatchArm};","highlight_start":30,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\parser\\statements.rs","byte_start":450,"byte_end":454,"line_start":12,"line_end":12,"column_start":39,"column_end":43,"is_primary":true,"text":[{"text":"use crate::ast::{Stmt, Expr, Pattern, Type, Span, BinaryOp, InternedString, MatchArm};","highlight_start":39,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\parser\\statements.rs","byte_start":472,"byte_end":486,"line_start":12,"line_end":12,"column_start":61,"column_end":75,"is_primary":true,"text":[{"text":"use crate::ast::{Stmt, Expr, Pattern, Type, Span, BinaryOp, InternedString, MatchArm};","highlight_start":61,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"src\\parser\\statements.rs","byte_start":433,"byte_end":454,"line_start":12,"line_end":12,"column_start":22,"column_end":43,"is_primary":true,"text":[{"text":"use crate::ast::{Stmt, Expr, Pattern, Type, Span, BinaryOp, InternedString, MatchArm};","highlight_start":22,"highlight_end":43}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src\\parser\\statements.rs","byte_start":470,"byte_end":486,"line_start":12,"line_end":12,"column_start":59,"column_end":75,"is_primary":true,"text":[{"text":"use crate::ast::{Stmt, Expr, Pattern, Type, Span, BinaryOp, InternedString, MatchArm};","highlight_start":59,"highlight_end":75}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused imports: `Expr`, `InternedString`, `Pattern`, and `Type`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\parser\\statements.rs:12:24\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::ast::{Stmt, Expr, Pattern, Type, Span, BinaryOp, InternedString, MatchArm};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused imports: `Expr` and `InternedString`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\parser\\types.rs","byte_start":555,"byte_end":559,"line_start":16,"line_end":16,"column_start":24,"column_end":28,"is_primary":true,"text":[{"text":"use crate::ast::{Type, Expr, Span, PrimitiveType, InternedString};","highlight_start":24,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\parser\\types.rs","byte_start":582,"byte_end":596,"line_start":16,"line_end":16,"column_start":51,"column_end":65,"is_primary":true,"text":[{"text":"use crate::ast::{Type, Expr, Span, PrimitiveType, InternedString};","highlight_start":51,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"src\\parser\\types.rs","byte_start":553,"byte_end":559,"line_start":16,"line_end":16,"column_start":22,"column_end":28,"is_primary":true,"text":[{"text":"use crate::ast::{Type, Expr, Span, PrimitiveType, InternedString};","highlight_start":22,"highlight_end":28}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src\\parser\\types.rs","byte_start":580,"byte_end":596,"line_start":16,"line_end":16,"column_start":49,"column_end":65,"is_primary":true,"text":[{"text":"use crate::ast::{Type, Expr, Span, PrimitiveType, InternedString};","highlight_start":49,"highlight_end":65}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused imports: `Expr` and `InternedString`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\parser\\types.rs:16:24\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::ast::{Type, Expr, Span, PrimitiveType, InternedString};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `start_pos`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src\\lexer\\lexer.rs","byte_start":7137,"byte_end":7146,"line_start":198,"line_end":198,"column_start":13,"column_end":22,"is_primary":true,"text":[{"text":"        let start_pos = self.position;","highlight_start":13,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_variables)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src\\lexer\\lexer.rs","byte_start":7137,"byte_end":7146,"line_start":198,"line_end":198,"column_start":13,"column_end":22,"is_primary":true,"text":[{"text":"        let start_pos = self.position;","highlight_start":13,"highlight_end":22}],"label":null,"suggested_replacement":"_start_pos","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused variable: `start_pos`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\lexer\\lexer.rs:198:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m198\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let start_pos = self.position;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11mhelp: if this is intentional, prefix it with an underscore: `_start_pos`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[warn(unused_variables)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `has_exponent` is assigned to, but never used","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src\\lexer\\lexer.rs","byte_start":15241,"byte_end":15253,"line_start":438,"line_end":438,"column_start":17,"column_end":29,"is_primary":true,"text":[{"text":"        let mut has_exponent = false;","highlight_start":17,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using `_has_exponent` instead","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: variable `has_exponent` is assigned to, but never used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\lexer\\lexer.rs:438:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m438\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let mut has_exponent = false;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: consider using `_has_exponent` instead\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"value assigned to `has_exponent` is never read","code":{"code":"unused_assignments","explanation":null},"level":"warning","spans":[{"file_name":"src\\lexer\\lexer.rs","byte_start":20983,"byte_end":20995,"line_start":580,"line_end":580,"column_start":17,"column_end":29,"is_primary":true,"text":[{"text":"                has_exponent = true;","highlight_start":17,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"maybe it is overwritten before being read?","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unused_assignments)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: value assigned to `has_exponent` is never read\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\lexer\\lexer.rs:580:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m580\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                has_exponent = true;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: maybe it is overwritten before being read?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[warn(unused_assignments)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable does not need to be mutable","code":{"code":"unused_mut","explanation":null},"level":"warning","spans":[{"file_name":"src\\semantic\\analyzer.rs","byte_start":6716,"byte_end":6736,"line_start":221,"line_end":221,"column_start":21,"column_end":41,"is_primary":true,"text":[{"text":"                let mut expression_types = HashMap::new();","highlight_start":21,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_mut)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this `mut`","code":null,"level":"help","spans":[{"file_name":"src\\semantic\\analyzer.rs","byte_start":6716,"byte_end":6720,"line_start":221,"line_end":221,"column_start":21,"column_end":25,"is_primary":true,"text":[{"text":"                let mut expression_types = HashMap::new();","highlight_start":21,"highlight_end":25}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: variable does not need to be mutable\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\semantic\\analyzer.rs:221:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m221\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                let mut expression_types = HashMap::new();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mhelp: remove this `mut`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[warn(unused_mut)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `context`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src\\parser\\parser.rs","byte_start":3464,"byte_end":3471,"line_start":106,"line_end":106,"column_start":51,"column_end":58,"is_primary":true,"text":[{"text":"    pub fn expect(&mut self, expected: TokenType, context: &str) -> ParseResult<Token> {","highlight_start":51,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src\\parser\\parser.rs","byte_start":3464,"byte_end":3471,"line_start":106,"line_end":106,"column_start":51,"column_end":58,"is_primary":true,"text":[{"text":"    pub fn expect(&mut self, expected: TokenType, context: &str) -> ParseResult<Token> {","highlight_start":51,"highlight_end":58}],"label":null,"suggested_replacement":"_context","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused variable: `context`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\parser\\parser.rs:106:51\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m106\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn expect(&mut self, expected: TokenType, context: &str) -> ParseResult<Token> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11mhelp: if this is intentional, prefix it with an underscore: `_context`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable does not need to be mutable","code":{"code":"unused_mut","explanation":null},"level":"warning","spans":[{"file_name":"src\\parser\\expressions.rs","byte_start":6602,"byte_end":6610,"line_start":183,"line_end":183,"column_start":13,"column_end":21,"is_primary":true,"text":[{"text":"        let mut expr = self.parse_additive_expression()?;","highlight_start":13,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove this `mut`","code":null,"level":"help","spans":[{"file_name":"src\\parser\\expressions.rs","byte_start":6602,"byte_end":6606,"line_start":183,"line_end":183,"column_start":13,"column_end":17,"is_primary":true,"text":[{"text":"        let mut expr = self.parse_additive_expression()?;","highlight_start":13,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: variable does not need to be mutable\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\parser\\expressions.rs:183:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m183\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let mut expr = self.parse_additive_expression()?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mhelp: remove this `mut`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable does not need to be mutable","code":{"code":"unused_mut","explanation":null},"level":"warning","spans":[{"file_name":"src\\visitor.rs","byte_start":23144,"byte_end":23155,"line_start":565,"line_end":565,"column_start":13,"column_end":24,"is_primary":true,"text":[{"text":"        let mut counter = NodeCounter::new();","highlight_start":13,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove this `mut`","code":null,"level":"help","spans":[{"file_name":"src\\visitor.rs","byte_start":23144,"byte_end":23148,"line_start":565,"line_end":565,"column_start":13,"column_end":17,"is_primary":true,"text":[{"text":"        let mut counter = NodeCounter::new();","highlight_start":13,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: variable does not need to be mutable\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\visitor.rs:565:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m565\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let mut counter = NodeCounter::new();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mhelp: remove this `mut`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable does not need to be mutable","code":{"code":"unused_mut","explanation":null},"level":"warning","spans":[{"file_name":"src\\visitor.rs","byte_start":23595,"byte_end":23608,"line_start":577,"line_end":577,"column_start":13,"column_end":26,"is_primary":true,"text":[{"text":"        let mut extractor = IdentifierExtractor::new();","highlight_start":13,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove this `mut`","code":null,"level":"help","spans":[{"file_name":"src\\visitor.rs","byte_start":23595,"byte_end":23599,"line_start":577,"line_end":577,"column_start":13,"column_end":17,"is_primary":true,"text":[{"text":"        let mut extractor = IdentifierExtractor::new();","highlight_start":13,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: variable does not need to be mutable\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\visitor.rs:577:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m577\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let mut extractor = IdentifierExtractor::new();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mhelp: remove this `mut`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"field `input` is never read","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src\\lexer\\lexer.rs","byte_start":258,"byte_end":263,"line_start":8,"line_end":8,"column_start":12,"column_end":17,"is_primary":false,"text":[{"text":"pub struct Lexer<'a> {","highlight_start":12,"highlight_end":17}],"label":"field in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\lexer\\lexer.rs","byte_start":304,"byte_end":309,"line_start":10,"line_end":10,"column_start":5,"column_end":10,"is_primary":true,"text":[{"text":"    input: &'a str,","highlight_start":5,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(dead_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: field `input` is never read\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\lexer\\lexer.rs:10:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m8\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Lexer<'a> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mfield in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// The input source code\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    input: &'a str,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[warn(dead_code)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"field `module_hierarchy` is never read","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src\\semantic\\symbols.rs","byte_start":7092,"byte_end":7103,"line_start":248,"line_end":248,"column_start":12,"column_end":23,"is_primary":false,"text":[{"text":"pub struct SymbolTable {","highlight_start":12,"highlight_end":23}],"label":"field in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\semantic\\symbols.rs","byte_start":7579,"byte_end":7595,"line_start":262,"line_end":262,"column_start":5,"column_end":21,"is_primary":true,"text":[{"text":"    module_hierarchy: HashMap<ScopeId, ScopeId>,","highlight_start":5,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`SymbolTable` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: field `module_hierarchy` is never read\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\semantic\\symbols.rs:262:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m248\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct SymbolTable {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mfield in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m262\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    module_hierarchy: HashMap<ScopeId, ScopeId>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `SymbolTable` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"14 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: 14 warnings emitted\u001b[0m\n\n"}
